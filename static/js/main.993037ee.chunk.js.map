{"version":3,"sources":["DrumMachine.js","App.js","serviceWorker.js","index.js"],"names":["DrumMachine","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","power","banks","first","id","src","key","about","display","playSample","bind","assertThisInitialized","keyDownHandle","handlePower","document","addEventListener","removeEventListener","setState","_this2","getElementById","currentTime","play","map","x","concat","e","keyCode","toUpperCase","_this3","i","react_default","a","createElement","onKeyDown","className","style","backgroundColor","onClick","type","name","Component","App","src_DrumMachine","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.993037ee.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass DrumMachine extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            power: false,\n            banks: {\n                //TO DO: Add new banks\n                first: [\n                    {\n                        id: \"chord-1\",\n                        src: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3\",\n                        key: \"Q\",\n                        about: \"Chord 1\"\n                    },\n                    {\n                        id: \"chord-2\",\n                        src: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3\",\n                        key: \"W\",\n                        about: \"Chord 2\"\n                    },\n                    {\n                        id: \"chord-3\",\n                        src: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3\",\n                        key: \"E\",\n                        about: \"Chord 3\"\n                    },\n                    {\n                        id: \"gul\",\n                        src: \"https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3\",\n                        key: \"A\",\n                        about: \"Give us a light\"\n                    },\n                    {\n                        id: \"do\",\n                        src: \"https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3\",\n                        key: \"S\",\n                        about: \"Open Hi Hat\"\n                    },\n                    {\n                        id: \"bld\",\n                        src: \"https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3\",\n                        key: \"D\",\n                        about: \"Closed Hi Hat\"\n                    },\n                    {\n                        id: \"kick\",\n                        src: \"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\",\n                        key: \"Z\",\n                        about: \"Punchy Kick\"\n                    },\n                    {\n                        id: \"side-stick\",\n                        src: \"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\",\n                        key: \"X\",\n                        about: \"Side Stick\"\n                    },\n                    {\n                        id: \"snare\",\n                        src: \"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3\",\n                        key: \"C\",\n                        about: \"Snare\"\n                    }\n                ]\n            },\n            display: \"Sample:\"\n        }\n        this.playSample = this.playSample.bind(this);\n        this.keyDownHandle = this.keyDownHandle.bind(this);\n        this.handlePower = this.handlePower.bind(this);\n    }\n\n    componentDidMount(){\n        document.addEventListener(\"keydown\", this.keyDownHandle);\n    }\n    componentWillUnmount(){\n        document.removeEventListener(\"keydown\", this.keyDownHandle);\n    }\n\n    handlePower(){\n        this.setState({power: !this.state.power})\n        if(!this.state.power){\n            this.setState({ display: \"Sample:\"})\n        } \n    }\n\n    playSample(key){\n        if(this.state.power){\n            document.getElementById(key).currentTime = 0;\n            document.getElementById(key).play();\n            this.state.banks.first.map(x => key === x.key ? this.setState({display: `Sample: ${x.about}`}) : 1)\n        }\n   }\n\n    keyDownHandle(e){\n        const x = e.keyCode;\n        const id = e.key.toUpperCase();\n        if(x === 81){\n            this.playSample(id);\n        }\n        if(x === 87){\n            this.playSample(id);\n        }\n        if(x === 69){\n            this.playSample(id);\n        }\n        if(x === 65){\n            this.playSample(id);\n        }\n        if(x === 83){\n            this.playSample(id);\n        }\n        if(x === 68){\n            this.playSample(id);\n        }\n        if(x === 90){\n            this.playSample(id);\n        }\n        if(x === 88){\n            this.playSample(id);\n        }\n        if(x === 67){\n            this.playSample(id);\n        }\n    }\n    //TODO: Volume bar, switch banks\n    render(){\n        const { first } = this.state.banks;\n        let i = 0;\n        return(\n            <div id=\"drum-machine\" onKeyDown={this.keyDownHandle}>\n                <div className=\"column\">\n                    <div id=\"display\" style={{backgroundColor: this.state.power ? \"beige\" : \"cadetblue\"}}>\n                        <p>{this.state.power &&  this.state.display}</p>\n                    </div>\n                    <div id=\"drum-pads\">  \n                        {first.map(x => \n                            <div className=\"drum-pad\" key={`drum-pad-${i}`} onClick={this.playSample.bind(this, x.key)} id={x.id}>\n                                <span>{x.key}</span>\n                            <audio key={`audio-${i++}`} className=\"clip\" id={x.key} src={x.src}></audio>\n                        </div>\n                        )}                \n                    </div>\n                </div>\n                <div className=\"column\">\n                    <input type=\"checkbox\" name=\"\" onClick={this.handlePower}></input>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default DrumMachine;","import React, { Component } from 'react';\nimport DrumMachine from './DrumMachine';\nimport \"./App.css\";\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <DrumMachine />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}